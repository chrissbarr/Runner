<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = view_wview[0]/2;
y = -300;
button_y = room_height*1.2;
room_speed = 30;
background_brown_colour = make_color_rgb(201,152,105);
dark_brown_colour = make_color_rgb(83,71,65);
width = view_wview[0]*.8;
height = view_hview[0]*.58;
moving=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var desired_y = 0.45*view_hview[0]
if (y &lt; desired_y)
    y += round ((desired_y - y)/4);

if(abs(y-yprevious)&lt;10)
    moving = false;
    
var desired_y = y + 1.4*height/2;
if(moving == false &amp;&amp; button_y &gt; desired_y)
    button_y -= round ((button_y - desired_y)/4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Set thickness for box outline
var border_thickness = width/100;;

width+=border_thickness;
height+=border_thickness;

//draw darker outline
draw_set_color(dark_brown_colour);
draw_rectangle(x-width/2,y-height/2,x+width/2,y+height/2,false);

width-=border_thickness;
height-=border_thickness;

//draw main box background
draw_set_color(background_brown_colour);
draw_rectangle(x-width/2,y-height/2,x+width/2,y+height/2,false);

//draw current score and high score displays
draw_score_block(score_spr,player_obj.points,x-width/4);
draw_score_block(best_spr,highscore_value(1),x+width/4);

//------------------draw OK button-------------//
if(moving==false)
{
    //set position and size
    var button_width = view_wview[0]/6;
    var button_height = view_hview[0]/10;
    var button_x = x;
    
    //draw dark border
    draw_set_color(dark_brown_colour);
    draw_rectangle( button_x - button_width / 2, 
                    button_y - button_height / 2,
                    button_x + button_width / 2,
                    button_y + button_height / 2,
                    false);
                    
    //draw lighter colour
    button_width -= border_thickness;
    button_height -= border_thickness;
    
    draw_set_color(background_brown_colour);
    draw_rectangle( button_x - button_width / 2, 
                    button_y - button_height / 2,
                    button_x + button_width / 2,
                    button_y + button_height / 2,
                    false);
                    
    //draw text
    draw_set_font(button_font);
    draw_set_color(dark_brown_colour);
    var button_str = "ok";
    draw_text(button_x - string_width(button_str)/2, button_y - string_height(button_str)/2, button_str);

    //check for mouse press
    if(mouse_check_button_pressed(mb_left)) //if pressed, check for within button...
    {
        var _mouse_x = mouse_x - view_xview[0];
        var _mouse_y = mouse_y - view_yview[0];
        
        //make button slightly bigger and easier to click
        button_width += 2*border_thickness;
        button_height += 2*border_thickness;
        
        if(    _mouse_x &gt; button_x - button_width / 2 
            &amp;&amp; _mouse_x &lt; button_x + button_width / 2
            &amp;&amp; _mouse_y &gt; button_y - button_height / 2
            &amp;&amp; _mouse_y &lt; button_y + button_height / 2)
            reset();
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
