<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>player_duck</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// movement
move_speed = 12;
jump_force = 18;

grav = 2;
grav_rate = 1.6;

crouched = false;
can_crouch = true;
crouch_time = room_speed * 2;

auto_pilot = false;

// block interaction
first_falling = true;
feet_width = 25;
prev_platform_num = 0;
last_block_touched = noone;

// y-triggers
y_falling = room_height;
y_death = y_falling;

dead = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_crouch = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>crouched = false;
can_crouch = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.paused != true)
{
    image_speed = 1;
    
    // constant motion right
    if (!first_falling &amp;&amp; !crouched &amp;&amp; !dead)
    {
        x += move_speed; 
    }
    
    // apply gravity (and jumping)
    y = y + grav;
    grav += grav_rate;
    if (grav &gt;= 20) 
    {
        grav = 20;
    }

    // check for block underneath
    var block = collision_line(x - feet_width / 2, y, x + feet_width / 2, y, block_obj, false, false);
    if (block != noone &amp;&amp; !dead)
    {
        first_falling = false;
        grav = 0;
        y = block.y - block.sprite_height / 2;
        sprite_index = player_run;
        
        if (block.platform_num != prev_platform_num) 
        {
            game_manager_obj.points += 1;
            audio_play_sound(land_snd, 1, false);
            prev_platform_num = block.platform_num;
        } 
        
        last_block_touched = block;
    }  
    
    // check for block to right
    if (collision_line(x + sprite_width / 2, y - 25, x + sprite_width / 2, y - sprite_height, block_obj, false, false) &amp;&amp; !dead) // Check for block beneath
    {
        move_speed = 0;
    }   
    
    // check for Jump
    var mouse_clicked_top_half = mouse_check_button_pressed(mb_any) &amp;&amp; !collision_point(mouse_x, mouse_y, pause_button_obj, true, false);
    if ((keyboard_check_pressed(vk_space) || mouse_clicked_top_half) &amp;&amp; grav == 0)
    {
        jump_scr();
    }        

    if (crouched)
    {
        if (mouse_check_button_released(mb_any))
        {
            crouched = false;
            alarm[2] = 1;
        }
        sprite_index = player_duck;
    }
    
    
    
    if (last_block_touched != noone)
    {
        y_falling = last_block_touched.y - last_block_touched.sprite_height / 4;
        y_death = last_block_touched.y + last_block_touched.sprite_height / 4;

        // reset if dead
        if (y &gt; y_death)
        {
            dead = true; 
            move_speed = 0;
        } 
        
        // check if the player is falling
        if (y &gt; y_falling)
        {
            sprite_index = player_falling;
        }
    }
      
    // debugging behaviour
    if (M_DEBUG) 
    {      
        // toggle autopilot mode
        if (keyboard_check_pressed(ord('A'))) 
        {
            auto_pilot =! auto_pilot;
        }
        
        // autopilot
        if (auto_pilot)
        {
            if (!collision_point(x + 15, y + 1, block_obj, false, false) &amp;&amp; grav == 0) 
            {        
                jump_scr();
            }
        }
    }    
}   
else 
{
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

if (global.debug_draw) 
{
    draw_set_color(c_red);
    draw_line(x - feet_width / 2, y, x + feet_width / 2, y);
    draw_line(x + sprite_width / 2, y - 25, x + sprite_width / 2, y - sprite_height);
    
    draw_set_color(c_blue);
    draw_line(x - sprite_width / 2, y_falling, x + sprite_width / 2, y_falling);
    draw_line(x - sprite_width / 2, y_death, x + sprite_width / 2, y_death);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
